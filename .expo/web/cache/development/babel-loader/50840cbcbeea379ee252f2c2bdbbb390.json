{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nvar ThreadManager = NativeModules.ThreadManager;\n\nvar Thread = function () {\n  function Thread(jsPath) {\n    var _this = this;\n\n    _classCallCheck(this, Thread);\n\n    if (!jsPath || !jsPath.endsWith('.js')) {\n      throw new Error('Invalid path for thread. Only js files are supported');\n    }\n\n    this.id = ThreadManager.startThread(jsPath.replace(\".js\", \"\")).then(function (id) {\n      DeviceEventEmitter.addListener(\"Thread\" + id, function (message) {\n        !!message && _this.onmessage && _this.onmessage(message);\n      });\n      return id;\n    }).catch(function (err) {\n      throw new Error(err);\n    });\n  }\n\n  _createClass(Thread, [{\n    key: \"postMessage\",\n    value: function postMessage(message) {\n      this.id.then(function (id) {\n        return ThreadManager.postThreadMessage(id, message);\n      });\n    }\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      this.id.then(ThreadManager.stopThread);\n    }\n  }]);\n\n  return Thread;\n}();\n\nexport { Thread as default };","map":{"version":3,"sources":["/home/fdr/Projects/stockeyAPP/node_modules/react-native-threads/js/Thread.js"],"names":["ThreadManager","NativeModules","Thread","jsPath","endsWith","Error","id","startThread","replace","then","DeviceEventEmitter","addListener","message","onmessage","catch","err","postThreadMessage","stopThread"],"mappings":";;;;IAKQA,a,GAAkBC,a,CAAlBD,a;;IAEaE,M;AACnB,kBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,QAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,QAAP,CAAgB,KAAhB,CAAhB,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,SAAKC,EAAL,GAAUN,aAAa,CAACO,WAAd,CAA0BJ,MAAM,CAACK,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAA1B,EACPC,IADO,CACF,UAAAH,EAAE,EAAI;AACVI,MAAAA,kBAAkB,CAACC,WAAnB,YAAwCL,EAAxC,EAA8C,UAACM,OAAD,EAAa;AACzD,SAAC,CAACA,OAAF,IAAa,KAAI,CAACC,SAAlB,IAA+B,KAAI,CAACA,SAAL,CAAeD,OAAf,CAA/B;AACD,OAFD;AAGA,aAAON,EAAP;AACD,KANO,EAOPQ,KAPO,CAOD,UAAAC,GAAG,EAAI;AAAE,YAAM,IAAIV,KAAJ,CAAUU,GAAV,CAAN;AAAsB,KAP9B,CAAV;AAQD;;;;gCAEWH,O,EAAS;AACnB,WAAKN,EAAL,CAAQG,IAAR,CAAa,UAAAH,EAAE;AAAA,eAAIN,aAAa,CAACgB,iBAAd,CAAgCV,EAAhC,EAAoCM,OAApC,CAAJ;AAAA,OAAf;AACD;;;gCAEW;AACV,WAAKN,EAAL,CAAQG,IAAR,CAAaT,aAAa,CAACiB,UAA3B;AACD;;;;;;SAtBkBf,M","sourcesContent":["import {\n  NativeModules,\n  DeviceEventEmitter,\n} from 'react-native';\n\nconst { ThreadManager } = NativeModules;\n\nexport default class Thread {\n  constructor(jsPath) {\n    if (!jsPath || !jsPath.endsWith('.js')) {\n      throw new Error('Invalid path for thread. Only js files are supported');\n    }\n\n    this.id = ThreadManager.startThread(jsPath.replace(\".js\", \"\"))\n      .then(id => {\n        DeviceEventEmitter.addListener(`Thread${id}`, (message) => {\n          !!message && this.onmessage && this.onmessage(message);\n        });\n        return id;\n      })\n      .catch(err => { throw new Error(err) });\n  }\n\n  postMessage(message) {\n    this.id.then(id => ThreadManager.postThreadMessage(id, message));\n  }\n\n  terminate() {\n    this.id.then(ThreadManager.stopThread);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}